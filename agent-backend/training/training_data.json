{
  "page_objects": [],
  "test_methods": [],
  "step_definitions": [
    {
      "file": "LoginStepDefinition.java",
      "steps": [
        "el usuario navega a la p√°gina de login",
        "el usuario ingresa email {string} y contrase√±a {string}",
        "el usuario hace clic en recordar sesi√≥n",
        "el usuario debe ser redirigido al dashboard",
        "se muestra un mensaje de error {string}"
      ],
      "detailed_steps": [
        {
          "type": "Given",
          "text": "el usuario navega a la p√°gina de login",
          "method": "elUsuarioNavegaALaPaginaDeLogin"
        },
        {
          "type": "When",
          "text": "el usuario ingresa email {string} y contrase√±a {string}",
          "method": "elUsuarioIngresaEmailYContrasena"
        },
        {
          "type": "And",
          "text": "el usuario hace clic en recordar sesi√≥n",
          "method": "elUsuarioHaceClicEnRecordarSesion"
        },
        {
          "type": "Then",
          "text": "el usuario debe ser redirigido al dashboard",
          "method": "elUsuarioDebeSerRedirigidoAlDashboard"
        },
        {
          "type": "Then",
          "text": "se muestra un mensaje de error {string}",
          "method": "seMuestraUnMensajeDeError"
        }
      ],
      "frameworks": [
        "Cucumber"
      ],
      "task_instances": [],
      "sample_code": "@Given(\"el usuario navega a la p√°gina de login\")\npublic void elUsuarioNavegaALaPaginaDeLogin() {\n    // Implementaci√≥n aqu√≠\n}\n\n@When(\"el usuario ingresa email {string} y contrase√±a {string}\")\npublic void elUsuarioIngresaEmailYContrasena() {\n    // Implementaci√≥n aqu√≠\n}\n"
    }
  ],
  "utilities": [],
  "test_data": [],
  "web_pages": [
    {
      "file": "LoginPage.java",
      "class_name": "LoginPage",
      "locators": [],
      "web_controls": [],
      "action_methods": [
        "clickLogin"
      ],
      "automation_type": "web",
      "sample_code": "package pages;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\npublic class LoginPage {\n    \n    private WebDriver driver;\n    \n    // Web Elements usando Selenium\n    @FindBy(id = \"email\")\n    p"
    }
  ],
  "web_tasks": [
    {
      "file": "LoginTask.java",
      "utility_type": "web_task",
      "business_methods": [
        "withCredentials",
        "withValidUser",
        "withInvalidUser",
        "withRememberMe"
      ],
      "page_usage": [],
      "automation_type": "web",
      "sample_code": "package tasks;\n\nimport pages.LoginPage;\nimport org.openqa.selenium.WebDriver;\n\npublic class LoginTask {\n    \n    private LoginPage loginPage;\n    \n    public LoginTask(WebDriver driver) {\n        this.loginPage = new LoginPage(driver);\n    }\n    \n    public void withCredentials(String email, String password) {\n        loginPage.enterEmail(email);\n        loginPage.enterPassword(password);\n        "
    }
  ],
  "web_controls": [
    {
      "control_type": "WebTextBox",
      "methods": [
        "sendKeys",
        "getText",
        "clear",
        "isDisplayed",
        "isEnabled"
      ],
      "usage": "public WebTextBox emailField = new WebTextBox(By.id(\"email\"));",
      "sample_implementation": "public class WebTextBox extends WebElement {\n    public void sendKeys(String text) {\n        element.clear();\n        element.sendKeys(text);\n    }\n    \n    public String getText() {\n        return element.getAttribute(\"value\");\n    }\n}"
    },
    {
      "control_type": "WebButton",
      "methods": [
        "click",
        "isEnabled",
        "getText",
        "isDisplayed"
      ],
      "usage": "public WebButton submitButton = new WebButton(By.xpath(\"//button[@type='submit']\"));",
      "sample_implementation": "public class WebButton extends WebElement {\n    public void click() {\n        WebDriverWait wait = new WebDriverWait(driver, 10);\n        wait.until(ExpectedConditions.elementToBeClickable(element));\n        element.click();\n    }\n}"
    },
    {
      "control_type": "WebDropdown",
      "methods": [
        "selectByText",
        "selectByValue",
        "selectByIndex",
        "getSelectedOption"
      ],
      "usage": "public WebDropdown countryDropdown = new WebDropdown(By.name(\"country\"));",
      "sample_implementation": "public class WebDropdown extends WebElement {\n    public void selectByText(String text) {\n        Select select = new Select(element);\n        select.selectByVisibleText(text);\n    }\n}"
    },
    {
      "control_type": "WebCheckBox",
      "methods": [
        "check",
        "uncheck",
        "isChecked",
        "toggle"
      ],
      "usage": "public WebCheckBox termsCheckbox = new WebCheckBox(By.id(\"terms\"));",
      "sample_implementation": "public class WebCheckBox extends WebElement {\n    public void check() {\n        if (!isChecked()) {\n            element.click();\n        }\n    }\n    \n    public boolean isChecked() {\n        return element.isSelected();\n    }\n}"
    },
    {
      "control_type": "WebLabel",
      "methods": [
        "getText",
        "isDisplayed",
        "getAttribute"
      ],
      "usage": "public WebLabel messageLabel = new WebLabel(By.css(\".message\"));",
      "sample_implementation": "public class WebLabel extends WebElement {\n    public String getText() {\n        return element.getText();\n    }\n}"
    }
  ],
  "project_type": "web",
  "frameworks": [
    "Selenium",
    "Cucumber",
    "JUnit"
  ],
  "consistency_rules": {
    "naming_conventions": {
      "pages": "NombrePage.java (ej: LoginPage.java, ProductPage.java)",
      "tasks": "NombreTask.java (ej: LoginTask.java, SearchTask.java)",
      "controls": "WebNombreControl.java (ej: WebTextBox.java, WebButton.java)",
      "step_definitions": "NombreStepDefinition.java (mismo patr√≥n que m√≥vil)"
    },
    "architectural_consistency": {
      "mobile_pattern": "Task ‚Üí Screen ‚Üí AppiumControl",
      "web_pattern": "Task ‚Üí Page ‚Üí WebControl",
      "business_methods": "Mantener mismos nombres: withCredentials(), withTheData(), etc.",
      "step_style": "Mantener espa√±ol y misma estructura de Cucumber"
    }
  },
  "training_prompt": "ENTRENAMIENTO ESPECIALIZADO - PROYECTO QA AUTOMATION\n\nTu misi√≥n es generar c√≥digo de pruebas autom√°ticas bas√°ndote EXCLUSIVAMENTE en los patrones y estructuras encontradas en este proyecto espec√≠fico.\n\n=== PATRONES DEL PROYECTO ===\n\nü•í CUCUMBER STEPS:\n- Steps: el usuario navega a la p√°gina de login, el usuario ingresa email {string} y contrase√±a {string}, el usuario hace clic en recordar sesi√≥n\n\n\n=== INSTRUCCIONES DE GENERACI√ìN ===\n\n1. SIEMPRE usa los mismos nombres de clases, m√©todos y patrones encontrados arriba\n2. MANT√âN la estructura y convenciones del proyecto\n3. NO inventes nuevos patrones - usa solo los detectados\n4. Cuando generes Page Objects, usa la misma estructura de locators\n5. Cuando generes tests, usa los mismos tipos de assertions\n6. CREA archivos siguiendo la estructura de carpetas del proyecto\n\nRECUERDA: Eres un especialista en ESTE proyecto espec√≠fico, no un experto gen√©rico.\n=== PATRONES WEB DETECTADOS ===\n\nüìÑ WEB PAGES:\n- Clase: LoginPage\\n  Locators: []\\n  Controles: []\\n\\n\n\nüéØ WEB TASKS:\n- Task: LoginTask.java\\n  M√©todos: ['withCredentials', 'withValidUser', 'withInvalidUser']\\n  Pages: []\\n\\n\n\n=== ARQUITECTURA H√çBRIDA ===\n\nüîÑ CONVERSI√ìN AUTOM√ÅTICA:\nM√≥vil ‚Üí Web\n- Screen ‚Üí Page\n- TextBox ‚Üí WebTextBox  \n- Button ‚Üí WebButton\n- Appium locators ‚Üí Selenium locators\n\nüì± M√ìVIL: Task-Screen-Control (Appium)\nüåê WEB: Task-Page-Control (Selenium)\n\n=== REGLAS DE CONSISTENCIA ===\n\n1. ‚úÖ MANT√âN la misma arquitectura en ambos tipos\n2. ‚úÖ USA los mismos nombres de m√©todos de negocio\n3. ‚úÖ CONVIERTE autom√°ticamente entre m√≥vil y web cuando sea necesario\n4. ‚úÖ MANT√âN el estilo espa√±ol para Cucumber steps\n5. ‚úÖ USA patterns espec√≠ficos detectados en el proyecto\n",
  "project_path": "../../example-web-project"
}